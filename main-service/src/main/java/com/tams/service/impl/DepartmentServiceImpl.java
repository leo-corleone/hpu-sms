package com.tams.service.impl;import cn.hutool.core.util.ObjectUtil;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.github.pagehelper.Page;import com.github.pagehelper.PageHelper;import com.tams.domain.ClassRoom;import com.tams.domain.Department;import com.tams.domain.Teacher;import com.tams.dto.PageParam;import com.tams.dto.PageResult;import com.tams.exception.base.BusinessException;import com.tams.mapper.DepartmentMapper;import com.tams.model.DepartmentModel;import com.tams.model.OptionsModel;import com.tams.service.ClassRoomService;import com.tams.service.DepartmentService;import com.tams.service.TeacherService;import org.springframework.beans.BeanUtils;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.StringUtils;import javax.annotation.Resource;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;@Servicepublic class DepartmentServiceImpl        extends ServiceImpl<DepartmentMapper , Department>        implements DepartmentService {    @Resource    private TeacherService teacherService;    @Resource    private ClassRoomService classRoomService;    @Override    public PageResult getList(PageParam pageParam) {        if (ObjectUtil.isEmpty(pageParam) || ObjectUtil.isEmpty(pageParam.getPage()) || ObjectUtil.isEmpty(pageParam.getPageSize())){            pageParam = new PageParam();            pageParam.setPage(1);            pageParam.setPageSize(1000);        }        Page<Object> objects = PageHelper.startPage(pageParam.getPage(), pageParam.getPageSize());        List<Department> departments = this.lambdaQuery()                                   .like(ObjectUtil.isNotEmpty(pageParam.getKeyword()), Department::getDepartName, pageParam.getKeyword())                                   .list();        List<DepartmentModel> departmentModels = new ArrayList<>(departments.size());        departments.forEach(department -> {            DepartmentModel departmentModel = new DepartmentModel();            BeanUtils.copyProperties(department , departmentModel);            if (ObjectUtil.isNotEmpty(department.getPresident())){                Teacher teacher = teacherService.getById(department.getPresident());                departmentModel.setPresidents(teacher.getName());            }            if (ObjectUtil.isNotEmpty(department.getVicePresident())){                Teacher teacher = teacherService.getById(department.getVicePresident());                departmentModel.setVicePresidents(teacher.getName());            }            if (ObjectUtil.isNotEmpty(department.getOffice())){                ClassRoom classroom = classRoomService.lambdaQuery().eq(ClassRoom::getName , department.getOffice()).one();                departmentModel.setOffice(classroom.getName());            }            departmentModels.add(departmentModel);        });        PageResult pageResult = new PageResult();        pageResult.setTotal(objects.getTotal());        pageResult.setItems(departmentModels);        return pageResult;    }    @Override    @Transactional    public boolean updateDepartment(DepartmentModel departmentModel) {        Department department = getById(departmentModel.getDId());        if (StringUtils.hasText( department.getOffice()) && department.getOffice().equals(departmentModel.getOffice())){           return updateById(departmentModel);        }        ClassRoom classroom = classRoomService.lambdaQuery().eq(ObjectUtil.isNotEmpty(departmentModel.getOffice()), ClassRoom::getName, departmentModel.getOffice()).one();        if (classroom.getStatus() == 1){            throw new BusinessException(departmentModel.getOffice() + "已被占用" , 333);        }        classRoomService.lambdaUpdate()                .set(ClassRoom::getStatus , -1)                .eq(ClassRoom::getName , department.getOffice())                .update();        updateById(departmentModel);        classRoomService.lambdaUpdate()                .set(ClassRoom::getStatus , 1)                .eq(ClassRoom::getName , departmentModel.getOffice())                .update();        return true;    }    @Override    @Transactional    public boolean addDepartment(DepartmentModel departmentModel) {        ClassRoom classRoom = classRoomService.lambdaQuery().eq(ClassRoom::getName, departmentModel.getOffice()).one();        if (classRoom.getStatus() == 1){          throw new BusinessException(departmentModel.getOffice() + "已被占用无法选择" , 333);        }        classRoomService.lambdaUpdate().set(ClassRoom::getStatus, 1).eq(ClassRoom::getName , departmentModel.getOffice()).update();        return save(departmentModel);    }    @Override    public Set<OptionsModel> departmentTeacher() {        Set<OptionsModel> set = new HashSet<>();        List<Department> departments = this.list();        departments.forEach(department -> {            OptionsModel optionsModel = new OptionsModel();            optionsModel.setValue(String.valueOf(department.getDId()));            optionsModel.setLabel(department.getDepartName());            List<Teacher> teachers = teacherService.lambdaQuery().eq(Teacher::getDId, department.getDId()).list();            if (teachers.size() > 0 ){                List<OptionsModel> optionsModels = new ArrayList<>(teachers.size());                teachers.forEach(teacher -> {                    OptionsModel optionsModel1 = new OptionsModel();                    optionsModel1.setLabel(teacher.getName());                    optionsModel1.setValue(String.valueOf(teacher.getTId()));                    optionsModels.add(optionsModel1);                });                optionsModel.setChildren(optionsModels);            }            set.add(optionsModel);        });        return set;    }}